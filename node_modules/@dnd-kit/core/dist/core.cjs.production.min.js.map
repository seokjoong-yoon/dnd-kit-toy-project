{"version":3,"file":"core.cjs.production.min.js","sources":["../src/components/Accessibility/defaults.ts","../src/store/actions.ts","../src/utilities/other/getValueIndex.ts","../src/utilities/other/noop.ts","../src/utilities/other/omit.ts","../src/store/context.ts","../src/utilities/coordinates/constants.ts","../src/utilities/coordinates/distanceBetweenPoints.ts","../src/utilities/coordinates/getEventCoordinates.ts","../src/utilities/event/isTouchEvent.ts","../src/utilities/event/isMouseEvent.ts","../src/utilities/coordinates/getRelativeTransformOrigin.ts","../src/utilities/algorithms/closestCenter.ts","../src/utilities/rect/rectAdjustment.ts","../src/utilities/scroll/getScrollableAncestors.ts","../src/utilities/scroll/isScrollable.ts","../src/utilities/scroll/getScrollableElement.ts","../src/utilities/scroll/getScrollCoordinates.ts","../src/types/direction.ts","../src/utilities/scroll/getScrollPosition.ts","../src/utilities/scroll/getScrollDirectionAndSpeed.ts","../src/utilities/scroll/documentScrollingElement.ts","../src/utilities/scroll/getScrollElementRect.ts","../src/utilities/scroll/getScrollOffsets.ts","../src/utilities/rect/getRect.ts","../src/utilities/rect/isViewRect.ts","../src/utilities/algorithms/closestCorners.ts","../src/utilities/algorithms/rectIntersection.ts","../src/utilities/document/getOwnerDocument.ts","../src/store/reducer.ts","../src/hooks/monitor/useDndMonitor.ts","../src/components/Accessibility/Accessibility.tsx","../src/hooks/utilities/useAutoScroller.ts","../src/hooks/utilities/useLayoutMeasuring.ts","../src/hooks/utilities/useData.ts","../src/hooks/utilities/useScrollableAncestors.ts","../src/hooks/utilities/useRect.ts","../src/sensors/utilities/Listeners.ts","../src/sensors/utilities/hasExceededDistance.ts","../src/sensors/keyboard/types.ts","../src/sensors/keyboard/defaults.ts","../src/sensors/keyboard/KeyboardSensor.ts","../src/utilities/document/getWindow.ts","../src/sensors/pointer/AbstractPointerSensor.ts","../src/sensors/utilities/getEventListenerTarget.ts","../src/sensors/pointer/PointerSensor.ts","../src/sensors/mouse/MouseSensor.ts","../src/sensors/touch/TouchSensor.ts","../src/modifiers/applyModifiers.ts","../src/components/DndContext/DndContext.tsx","../src/hooks/utilities/useCachedNode.ts","../src/utilities/rect/getRectDelta.ts","../src/hooks/utilities/useScrollOffsets.ts","../src/utilities/rect/adjustScale.ts","../src/hooks/utilities/useCombineActivators.ts","../src/hooks/useDraggable.ts","../src/hooks/useDndContext.ts","../src/components/DragOverlay/DragOverlay.tsx","../src/components/DragOverlay/hooks/useDerivedTransform.ts","../src/components/DragOverlay/hooks/useDropAnimation.ts","../src/hooks/utilities/useSyntheticListeners.ts","../src/hooks/useDroppable.ts","../src/sensors/useSensor.ts","../src/sensors/useSensors.ts"],"sourcesContent":["import type {Announcements, ScreenReaderInstructions} from './types';\n\nexport const screenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart(id) {\n    return `Picked up draggable item ${id}.`;\n  },\n  onDragOver(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${id} is no longer over a droppable area.`;\n  },\n  onDragEnd(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${id} was dropped.`;\n  },\n  onDragCancel(id) {\n    return `Dragging was cancelled. Draggable item ${id} was dropped.`;\n  },\n};\n","import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  DragOver = 'dragOver',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n    };\n","export const getMaxValueIndex = (array: number[]) =>\n  getValueIndex(array, (value, tracked) => value > tracked);\n\nexport const getMinValueIndex = (array: number[]) =>\n  getValueIndex(array, (value, tracked) => value < tracked);\n\n/**\n * Returns the index of the smallest number in an array of numbers\n */\nexport function getValueIndex(\n  array: number[],\n  comparator: (value: number, tracked: number) => boolean\n) {\n  if (array.length === 0) {\n    return -1;\n  }\n\n  let tracked = array[0];\n  let index = 0;\n\n  for (var i = 1; i < array.length; i++) {\n    if (comparator(array[i], tracked)) {\n      index = i;\n      tracked = array[i];\n    }\n  }\n\n  return index;\n}\n","export function noop(..._args: any) {}\n","export function omit<T>(id: string, elements: Record<string, T>) {\n  const {[id]: _, ...other} = elements;\n\n  return other;\n}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport type {DndContextDescriptor} from './types';\n\nexport const Context = createContext<DndContextDescriptor>({\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  activeNodeClientRect: null,\n  activators: [],\n  ariaDescribedById: {\n    draggable: '',\n  },\n  containerNodeRect: null,\n  dispatch: noop,\n  draggableNodes: {},\n  droppableRects: new Map(),\n  droppableContainers: {},\n  over: null,\n  overlayNode: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  recomputeLayouts: noop,\n  windowRect: null,\n  willRecomputeLayouts: false,\n});\n","import type {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","import type {Coordinates} from '../../types';\n\n/**\n * Returns the distance between two points\n */\nexport function distanceBetween(p1: Coordinates, p2: Coordinates) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n","import type {Coordinates} from '../../types';\nimport {isMouseEvent, isTouchEvent} from '../event';\n\n/**\n * Returns the normalized x and y coordinates for mouse and touch events.\n */\nexport function getEventCoordinates(event: Event): Coordinates {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {clientX: x, clientY: y} = event.touches[0];\n\n      return {\n        x,\n        y,\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {clientX: x, clientY: y} = event.changedTouches[0];\n\n      return {\n        x,\n        y,\n      };\n    }\n  }\n\n  if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n  };\n}\n","export function isTouchEvent(event: Event): event is TouchEvent {\n  return window?.TouchEvent && event instanceof TouchEvent;\n}\n","export function isMouseEvent(event: Event): event is MouseEvent {\n  return (\n    (window?.MouseEvent && event instanceof MouseEvent) ||\n    event.type.includes('mouse')\n  );\n}\n","import {getEventCoordinates} from './getEventCoordinates';\n\nexport function getRelativeTransformOrigin(\n  event: MouseEvent | TouchEvent | KeyboardEvent,\n  rect: ClientRect\n) {\n  if (event instanceof KeyboardEvent) {\n    return '0 0';\n  }\n\n  const eventCoordinates = getEventCoordinates(event);\n  const transformOrigin = {\n    x: ((eventCoordinates.x - rect.left) / rect.width) * 100,\n    y: ((eventCoordinates.y - rect.top) / rect.height) * 100,\n  };\n\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n","import {getMinValueIndex} from '../other';\nimport {distanceBetween} from '../coordinates';\nimport type {Coordinates, LayoutRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the coordinates of the center of a given ClientRect\n */\nfunction centerOfRectangle(\n  rect: LayoutRect,\n  left = rect.offsetLeft,\n  top = rect.offsetTop\n): Coordinates {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5,\n  };\n}\n\n/**\n * Returns the closest rectangle from an array of rectangles to the center of a given\n * rectangle.\n */\nexport const closestCenter: CollisionDetection = (rects, rect) => {\n  const centerRect = centerOfRectangle(rect, rect.left, rect.top);\n  const distances = rects.map(([_, rect]) =>\n    distanceBetween(centerOfRectangle(rect), centerRect)\n  );\n\n  const minValueIndex = getMinValueIndex(distances);\n\n  return rects[minValueIndex] ? rects[minValueIndex][0] : null;\n};\n","import type {Coordinates, ViewRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustViewRect(\n    viewRect: ViewRect,\n    ...adjustments: Coordinates[]\n  ): ViewRect {\n    return adjustments.reduce<ViewRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n        offsetLeft: acc.offsetLeft + modifier * adjustment.x,\n        offsetTop: acc.offsetTop + modifier * adjustment.y,\n      }),\n      {...viewRect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","import {isScrollable} from './isScrollable';\n\nexport function getScrollableAncestors(element: Node | null): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (node instanceof Document && node.scrollingElement != null) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!(node instanceof HTMLElement) || node instanceof SVGElement) {\n      return scrollParents;\n    }\n\n    if (isScrollable(node)) {\n      scrollParents.push(node);\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  return element ? findScrollableAncestors(element.parentNode) : scrollParents;\n}\n","export function isScrollable(node: HTMLElement): boolean {\n  const computedStyle = window.getComputedStyle(node);\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return (\n    properties.find((property) => {\n      const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n      return typeof value === 'string' ? overflowRegex.test(value) : false;\n    }) != null\n  );\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  if (element === document.scrollingElement || element instanceof Document) {\n    return window;\n  }\n\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  return null;\n}\n","import type {Coordinates} from '../../types';\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  if (element instanceof Window) {\n    return {\n      x: element.scrollX,\n      y: element.scrollY,\n    };\n  }\n\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop,\n  };\n}\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","export function getScrollPosition(scrollingContainer: Element) {\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollingContainer.clientWidth,\n    y: scrollingContainer.scrollHeight - scrollingContainer.clientHeight,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {Direction, ViewRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\nimport {isDocumentScrollingElement} from './documentScrollingElement';\n\ninterface Rect extends Pick<ViewRect, 'top' | 'left' | 'right' | 'bottom'> {}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2,\n};\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ViewRect,\n  {top, left, right, bottom}: Rect,\n  acceleration = 10,\n  thresholdPercentage = defaultThreshold\n) {\n  const {clientHeight, clientWidth} = scrollContainer;\n  const finalScrollContainerRect = isDocumentScrollingElement(scrollContainer)\n    ? {\n        top: 0,\n        left: 0,\n        right: clientWidth,\n        bottom: clientHeight,\n        width: clientWidth,\n        height: clientHeight,\n      }\n    : scrollContainerRect;\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n  const threshold = {\n    height: finalScrollContainerRect.height * thresholdPercentage.y,\n    width: finalScrollContainerRect.width * thresholdPercentage.x,\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.top + threshold.height) - top) /\n          threshold.height\n      );\n  } else if (\n    !isBottom &&\n    bottom >= finalScrollContainerRect.bottom - threshold.height\n  ) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.bottom - threshold.height) - bottom) /\n          threshold.height\n      );\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.right - threshold.width) - right) /\n          threshold.width\n      );\n  } else if (\n    !isLeft &&\n    left <= finalScrollContainerRect.left + threshold.width\n  ) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.left + threshold.width) - left) /\n          threshold.width\n      );\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","export function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  const {top, left, right, bottom} = element.getBoundingClientRect();\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight,\n  };\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {getScrollCoordinates} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n","import type {Coordinates, ClientRect, LayoutRect, ViewRect} from '../../types';\nimport {getScrollableAncestors, getScrollOffsets} from '../scroll';\nimport {defaultCoordinates} from '../coordinates';\n\nfunction getEdgeOffset(\n  node: HTMLElement | null,\n  parent: (Node & ParentNode) | null,\n  offset = defaultCoordinates\n): Coordinates {\n  if (!node || !(node instanceof HTMLElement)) {\n    return offset;\n  }\n\n  const nodeOffset = {\n    x: offset.x + node.offsetLeft,\n    y: offset.y + node.offsetTop,\n  };\n\n  if (node.offsetParent === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.offsetParent as HTMLElement, parent, nodeOffset);\n}\n\nexport function getElementLayout(element: HTMLElement): LayoutRect {\n  const {offsetWidth: width, offsetHeight: height} = element;\n  const {x: offsetLeft, y: offsetTop} = getEdgeOffset(element, null);\n\n  return {\n    width,\n    height,\n    offsetTop,\n    offsetLeft,\n  };\n}\n\nexport function getBoundingClientRect(\n  element: HTMLElement | Window\n): ClientRect {\n  if (element instanceof Window) {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return {\n      top: 0,\n      left: 0,\n      right: width,\n      bottom: height,\n      width,\n      height,\n      offsetTop: 0,\n      offsetLeft: 0,\n    };\n  }\n\n  const {offsetTop, offsetLeft} = getElementLayout(element);\n  const {\n    width,\n    height,\n    top,\n    bottom,\n    left,\n    right,\n  } = element.getBoundingClientRect();\n\n  return {\n    width,\n    height,\n    top,\n    bottom,\n    right,\n    left,\n    offsetTop,\n    offsetLeft,\n  };\n}\n\nexport function getViewRect(element: HTMLElement): ViewRect {\n  const {width, height, offsetTop, offsetLeft} = getElementLayout(element);\n  const scrollableAncestors = getScrollableAncestors(element);\n  const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n  const top = offsetTop - scrollOffsets.y;\n  const left = offsetLeft - scrollOffsets.x;\n\n  return {\n    width,\n    height,\n    top,\n    bottom: top + height,\n    right: left + width,\n    left,\n    offsetTop,\n    offsetLeft,\n  };\n}\n","import type {LayoutRect, ViewRect} from '../../types';\n\nexport function isViewRect(entry: LayoutRect | ViewRect): entry is ViewRect {\n  return 'top' in entry;\n}\n","import {getMinValueIndex} from '../other';\nimport {distanceBetween} from '../coordinates';\nimport {isViewRect} from '../rect';\nimport type {LayoutRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\n\nfunction cornersOfRectangle(\n  rect: LayoutRect,\n  left = rect.offsetLeft,\n  top = rect.offsetTop\n) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + rect.width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + rect.height,\n    },\n    {\n      x: left + rect.width,\n      y: top + rect.height,\n    },\n  ];\n}\n\n/**\n * Returns the closest rectangle from an array of rectangles to the corners of\n * another rectangle.\n */\nexport const closestCorners: CollisionDetection = (entries, target) => {\n  const corners = cornersOfRectangle(target, target.left, target.top);\n\n  const distances = entries.map(([_, entry]) => {\n    const entryCorners = cornersOfRectangle(\n      entry,\n      isViewRect(entry) ? entry.left : undefined,\n      isViewRect(entry) ? entry.top : undefined\n    );\n    const distances = corners.reduce((accumulator, corner, index) => {\n      return accumulator + distanceBetween(entryCorners[index], corner);\n    }, 0);\n\n    return Number((distances / 4).toFixed(4));\n  });\n\n  const minValueIndex = getMinValueIndex(distances);\n\n  return entries[minValueIndex] ? entries[minValueIndex][0] : null;\n};\n","import {getMaxValueIndex} from '../other';\nimport type {LayoutRect, ViewRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nfunction getIntersectionRatio(entry: LayoutRect, target: ViewRect): number {\n  const top = Math.max(target.top, entry.offsetTop);\n  const left = Math.max(target.left, entry.offsetLeft);\n  const right = Math.min(\n    target.left + target.width,\n    entry.offsetLeft + entry.width\n  );\n  const bottom = Math.min(\n    target.top + target.height,\n    entry.offsetTop + entry.height\n  );\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangle that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = (entries, target) => {\n  const intersections = entries.map(([_, entry]) =>\n    getIntersectionRatio(entry, target)\n  );\n\n  const maxValueIndex = getMaxValueIndex(intersections);\n\n  if (intersections[maxValueIndex] <= 0) {\n    return null;\n  }\n\n  return entries[maxValueIndex] ? entries[maxValueIndex][0] : null;\n};\n","export function getOwnerDocument(target: Event['target']) {\n  return target instanceof HTMLElement ? target.ownerDocument : document;\n}\n","import {omit} from '../utilities';\nimport {Action, Actions} from './actions';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      nodes: {},\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: {},\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n        },\n      };\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: {\n            ...state.droppable.containers,\n            [id]: element,\n          },\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, disabled} = action;\n      const element = state.droppable.containers[id];\n\n      if (!element) {\n        return state;\n      }\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: {\n            ...state.droppable.containers,\n            [id]: {\n              ...element,\n              disabled,\n            },\n          },\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id} = action;\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: omit(id, state.droppable.containers),\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {createContext, useContext, useEffect, useRef} from 'react';\n\nimport {Action} from '../../store';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n} from '../../types';\n\nexport interface Arguments {\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface DndMonitorState {\n  type: Action | null;\n  event:\n    | null\n    | DragStartEvent\n    | DragMoveEvent\n    | DragOverEvent\n    | DragEndEvent\n    | DragCancelEvent;\n}\n\nexport const DndMonitorContext = createContext<DndMonitorState>({\n  type: null,\n  event: null,\n});\n\nexport function useDndMonitor({\n  onDragStart,\n  onDragMove,\n  onDragOver,\n  onDragEnd,\n  onDragCancel,\n}: Arguments) {\n  const monitorState = useContext(DndMonitorContext);\n  const previousMonitorState = useRef(monitorState);\n\n  useEffect(() => {\n    if (monitorState !== previousMonitorState.current) {\n      const {type, event} = monitorState;\n\n      switch (type) {\n        case Action.DragStart:\n          onDragStart?.(event as DragStartEvent);\n          break;\n        case Action.DragMove:\n          onDragMove?.(event as DragMoveEvent);\n          break;\n        case Action.DragOver:\n          onDragOver?.(event as DragOverEvent);\n          break;\n        case Action.DragCancel:\n          onDragCancel?.(event as DragCancelEvent);\n          break;\n        case Action.DragEnd:\n          onDragEnd?.(event as DragEndEvent);\n          break;\n      }\n\n      previousMonitorState.current = monitorState;\n    }\n  }, [\n    monitorState,\n    onDragStart,\n    onDragMove,\n    onDragOver,\n    onDragEnd,\n    onDragCancel,\n  ]);\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport type {Announcements, ScreenReaderInstructions} from './types';\nimport type {UniqueIdentifier} from '../../types';\nimport {defaultAnnouncements} from './defaults';\nimport {DndMonitorArguments, useDndMonitor} from '../../hooks/monitor';\n\ninterface Props {\n  announcements?: Announcements;\n  screenReaderInstructions: ScreenReaderInstructions;\n  hiddenTextDescribedById: UniqueIdentifier;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  hiddenTextDescribedById,\n  screenReaderInstructions,\n}: Props) {\n  const {announce, announcement} = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo<DndMonitorArguments>(\n      () => ({\n        onDragStart({active}) {\n          announce(announcements.onDragStart(active.id));\n        },\n        onDragMove({active, over}) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove(active.id, over?.id));\n          }\n        },\n        onDragOver({active, over}) {\n          announce(announcements.onDragOver(active.id, over?.id));\n        },\n        onDragEnd({active, over}) {\n          announce(announcements.onDragEnd(active.id, over?.id));\n        },\n        onDragCancel({active}) {\n          announce(announcements.onDragCancel(active.id));\n        },\n      }),\n      [announce, announcements]\n    )\n  );\n\n  return mounted\n    ? createPortal(\n        <>\n          <HiddenText\n            id={hiddenTextDescribedById}\n            value={screenReaderInstructions.draggable}\n          />\n          <LiveRegion id={liveRegionId} announcement={announcement} />\n        </>,\n        document.body\n      )\n    : null;\n}\n","import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useInterval} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed, defaultCoordinates} from '../../utilities';\nimport type {Coordinates, Direction, ViewRect} from '../../types';\n\nexport type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];\n\nexport enum AutoScrollActivator {\n  Pointer,\n  DraggableRect,\n}\n\nexport interface Options {\n  acceleration?: number;\n  activator?: AutoScrollActivator;\n  canScroll?: CanScroll;\n  enabled?: boolean;\n  interval?: number;\n  order?: TraversalOrder;\n  threshold?: {\n    x: number;\n    y: number;\n  };\n}\n\ninterface Arguments extends Options {\n  draggingRect: ViewRect | null;\n  enabled: boolean;\n  pointerCoordinates: Coordinates | null;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ViewRect[];\n}\n\nexport type CanScroll = (element: Element) => boolean;\n\nexport enum TraversalOrder {\n  TreeOrder,\n  ReversedTreeOrder,\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  threshold,\n}: Arguments) {\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({\n    x: 1,\n    y: 1,\n  });\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates\n          ? {\n              top: pointerCoordinates.y,\n              bottom: pointerCoordinates.y,\n              left: pointerCoordinates.x,\n              right: pointerCoordinates.x,\n            }\n          : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n\n    return null;\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollDirection = useRef<ScrollDirection>(defaultCoordinates);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(\n    () =>\n      order === TraversalOrder.TreeOrder\n        ? [...scrollableAncestors].reverse()\n        : scrollableAncestors,\n    [order, scrollableAncestors]\n  );\n\n  useEffect(\n    () => {\n      if (!enabled || !scrollableAncestors.length || !rect) {\n        clearAutoScrollInterval();\n        return;\n      }\n\n      for (const scrollContainer of sortedScrollableAncestors) {\n        if (canScroll?.(scrollContainer) === false) {\n          continue;\n        }\n\n        const index = scrollableAncestors.indexOf(scrollContainer);\n        const scrolllContainerRect = scrollableAncestorRects[index];\n\n        if (!scrolllContainerRect) {\n          continue;\n        }\n\n        const {direction, speed} = getScrollDirectionAndSpeed(\n          scrollContainer,\n          scrolllContainerRect,\n          rect,\n          acceleration,\n          threshold\n        );\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n\n          return;\n        }\n      }\n\n      scrollSpeed.current = {x: 0, y: 0};\n      scrollDirection.current = {x: 0, y: 0};\n      clearAutoScrollInterval();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      acceleration,\n      autoScroll,\n      canScroll,\n      clearAutoScrollInterval,\n      enabled,\n      interval,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(rect),\n      setAutoScrollInterval,\n      scrollableAncestors,\n      sortedScrollableAncestors,\n      scrollableAncestorRects,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(threshold),\n    ]\n  );\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getElementLayout} from '../../utilities';\nimport type {DroppableContainers, LayoutRectMap} from '../../store/types';\n\ninterface Arguments {\n  dragging: boolean;\n  dependencies: any[];\n  config: Partial<LayoutMeasuring> | undefined;\n}\n\nexport enum LayoutMeasuringStrategy {\n  Always,\n  BeforeDragging,\n  WhileDragging,\n}\n\nexport enum LayoutMeasuringFrequency {\n  Optimized = 'optimized',\n}\n\nexport interface LayoutMeasuring {\n  strategy: LayoutMeasuringStrategy;\n  frequency: LayoutMeasuringFrequency | number;\n}\n\nconst defaultValue: LayoutRectMap = new Map();\n\nexport function useLayoutMeasuring(\n  containers: DroppableContainers,\n  {dragging, dependencies, config}: Arguments\n) {\n  const [willRecomputeLayouts, setWillRecomputeLayouts] = useState(false);\n  const {frequency, strategy} = getLayoutMeasuring(config);\n  const containersRef = useRef(containers);\n  const recomputeLayouts = useCallback(() => setWillRecomputeLayouts(true), []);\n  const recomputeLayoutsTimeoutId = useRef<NodeJS.Timeout | null>(null);\n  const disabled = isDisabled();\n  const layoutRectMap = useLazyMemo<LayoutRectMap>(\n    (previousValue) => {\n      if (disabled && !dragging) {\n        return defaultValue;\n      }\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        willRecomputeLayouts\n      ) {\n        for (let container of Object.values(containers)) {\n          if (!container) {\n            continue;\n          }\n\n          container.rect.current = container.node.current\n            ? getElementLayout(container.node.current)\n            : null;\n        }\n\n        return createLayoutRectMap(containers);\n      }\n\n      return previousValue;\n    },\n    [containers, dragging, disabled, willRecomputeLayouts]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(() => {\n    if (willRecomputeLayouts) {\n      setWillRecomputeLayouts(false);\n    }\n  }, [willRecomputeLayouts]);\n\n  useEffect(\n    function recompute() {\n      if (disabled) {\n        return;\n      }\n\n      requestAnimationFrame(recomputeLayouts);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dragging, disabled]\n  );\n\n  useEffect(\n    function forceRecomputeLayouts() {\n      if (\n        disabled ||\n        typeof frequency !== 'number' ||\n        recomputeLayoutsTimeoutId.current !== null\n      ) {\n        return;\n      }\n\n      recomputeLayoutsTimeoutId.current = setTimeout(() => {\n        recomputeLayouts();\n        recomputeLayoutsTimeoutId.current = null;\n      }, frequency);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [frequency, disabled, recomputeLayouts, ...dependencies]\n  );\n\n  return {\n    layoutRectMap,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case LayoutMeasuringStrategy.Always:\n        return false;\n      case LayoutMeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\n\nfunction createLayoutRectMap(\n  containers: DroppableContainers | null\n): LayoutRectMap {\n  const layoutRectMap: LayoutRectMap = new Map();\n\n  if (containers) {\n    for (const container of Object.values(containers)) {\n      if (!container) {\n        continue;\n      }\n\n      const {id, rect, disabled} = container;\n\n      if (disabled || rect.current == null) {\n        continue;\n      }\n\n      layoutRectMap.set(id, rect.current);\n    }\n  }\n\n  return layoutRectMap;\n}\n\nconst defaultLayoutMeasuring: LayoutMeasuring = {\n  strategy: LayoutMeasuringStrategy.WhileDragging,\n  frequency: LayoutMeasuringFrequency.Optimized,\n};\n\nfunction getLayoutMeasuring(\n  layoutMeasuring: Arguments['config']\n): LayoutMeasuring {\n  return layoutMeasuring\n    ? {\n        ...defaultLayoutMeasuring,\n        ...layoutMeasuring,\n      }\n    : defaultLayoutMeasuring;\n}\n","import {useRef} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {Data} from '../../store';\n\nexport function useData(data: Data | undefined) {\n  const dataRef = useRef(data);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dataRef.current !== data) {\n      dataRef.current = data;\n    }\n  }, [data]);\n\n  return dataRef;\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: HTMLElement | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {\n  getBoundingClientRect,\n  getElementLayout,\n  getViewRect,\n} from '../../utilities';\nimport type {LayoutRect} from '../../types';\n\ntype RectFn<T, U> = (element: U) => T;\n\nexport const useClientRect = createUseRectFn(getBoundingClientRect);\nexport const useClientRects = createUseRectsFn(getBoundingClientRect);\nexport const useViewRect = createUseRectFn(getViewRect);\nexport const useLayoutRect = createUseRectFn(getElementLayout);\n\nfunction createUseRectFn<T = LayoutRect, U = HTMLElement>(\n  getRect: RectFn<T, U>\n) {\n  return function useClientRect(\n    element: U | null,\n    forceRecompute?: boolean\n  ): T | null {\n    const previousElement = useRef(element);\n\n    return useLazyMemo<T | null>(\n      (previousValue) => {\n        if (!element) {\n          return null;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && element) ||\n          element !== previousElement.current\n        ) {\n          if (element instanceof HTMLElement && element.parentNode == null) {\n            return null;\n          }\n\n          return getRect(element as U);\n        }\n\n        return previousValue ?? null;\n      },\n      [element, forceRecompute]\n    );\n  };\n}\n\nfunction createUseRectsFn<T = LayoutRect>(getRect: RectFn<T, HTMLElement>) {\n  const defaultValue: T[] = [];\n\n  return function useRects(elements: Element[], forceRecompute?: boolean): T[] {\n    const previousElements = useRef(elements);\n\n    return useLazyMemo<T[]>(\n      (previousValue) => {\n        if (!elements.length) {\n          return defaultValue;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && elements.length) ||\n          elements !== previousElements.current\n        ) {\n          return elements.map((element) => getRect(element as HTMLElement));\n        }\n\n        return previousValue ?? defaultValue;\n      },\n      [elements, forceRecompute]\n    );\n  };\n}\n","export class Listeners {\n  private listeners: {\n    eventName: string;\n    handler: EventListenerOrEventListenerObject;\n  }[] = [];\n\n  constructor(private target: EventTarget) {}\n\n  public add(\n    eventName: string,\n    handler: EventListenerOrEventListenerObject,\n    options?: AddEventListenerOptions | false\n  ) {\n    this.target.addEventListener(eventName, handler, options);\n    this.listeners.push({eventName, handler});\n  }\n\n  public removeAll() {\n    this.listeners.forEach(({eventName, handler}) =>\n      this.target.removeEventListener(eventName, handler)\n    );\n  }\n}\n","import type {Coordinates, DistanceMeasurement} from '../../types';\n\nexport function hasExceededDistance(\n  delta: Coordinates,\n  measurement: DistanceMeasurement\n): boolean {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n} from '@dnd-kit/utilities';\n\nimport {Listeners} from '../utilities';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates} from '../../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\nimport {\n  defaultCoordinates,\n  getBoundingClientRect,\n  getOwnerDocument,\n  getWindow,\n  getScrollPosition,\n  getScrollElementRect,\n} from '../../utilities';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n  onActivation?({event}: {event: KeyboardEvent}): void;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private coordinates: Coordinates = defaultCoordinates;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    setTimeout(() => {\n      this.listeners.add('keydown', this.handleKeyDown);\n      this.windowListeners.add('resize', this.handleCancel);\n    });\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n\n    if (!activeNode.node.current) {\n      throw new Error('Active draggable node is undefined');\n    }\n\n    const activeNodeRect = getBoundingClientRect(activeNode.node.current);\n    const coordinates = {\n      x: activeNodeRect.left,\n      y: activeNodeRect.top,\n    };\n\n    this.coordinates = coordinates;\n\n    onStart(coordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (event instanceof KeyboardEvent) {\n      const {coordinates} = this;\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates: coordinates,\n      });\n\n      if (newCoordinates) {\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const coordinatesDelta = getCoordinatesDelta(\n            newCoordinates,\n            coordinates\n          );\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll,\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                scrollContainer.scrollLeft + coordinatesDelta.x <=\n                  maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                left: coordinatesDelta.x,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.x =\n              direction === KeyboardCode.Right\n                ? scrollContainer.scrollLeft - maxScroll.x\n                : scrollContainer.scrollLeft - minScroll.x;\n\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior,\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                scrollContainer.scrollTop + coordinatesDelta.y <=\n                  maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                top: coordinatesDelta.y,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.y =\n              direction === KeyboardCode.Down\n                ? scrollContainer.scrollTop - maxScroll.y\n                : scrollContainer.scrollTop - minScroll.y;\n\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior,\n            });\n\n            break;\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(newCoordinates, scrollDelta)\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n    this.coordinates = coordinates;\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {\n          keyboardCodes = defaultKeyboardCodes,\n          onActivation,\n        }: KeyboardSensorOptions\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          event.preventDefault();\n\n          onActivation?.({event: event.nativeEvent});\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {getOwnerDocument} from './getOwnerDocument';\n\nexport function getWindow(target: Event['target']) {\n  return getOwnerDocument(target).defaultView ?? window;\n}\n","import {subtract as getCoordinatesDelta} from '@dnd-kit/utilities';\n\nimport {\n  getEventListenerTarget,\n  hasExceededDistance,\n  Listeners,\n} from '../utilities';\n\nimport {getEventCoordinates, getOwnerDocument} from '../../utilities';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates, DistanceMeasurement} from '../../types';\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint = DistanceConstraint | DelayConstraint;\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface AbstractPointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n  onActivation?({event}: {event: Event}): void;\n}\n\nexport type AbstractPointerSensorProps = SensorProps<AbstractPointerSensorOptions>;\n\nenum EventName {\n  Keydown = 'keydown',\n}\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private ownerDocument: Document;\n\n  constructor(\n    private props: AbstractPointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n\n    this.props = props;\n    this.events = events;\n    this.ownerDocument = getOwnerDocument(event.target);\n    this.listeners = new Listeners(listenerTarget);\n    this.initialCoordinates = getEventCoordinates(event);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, false);\n    this.listeners.add(events.end.name, this.handleEnd);\n\n    this.ownerDocument.addEventListener(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.ownerDocument.removeEventListener(\n      EventName.Keydown,\n      this.handleKeydown\n    );\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event);\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onEnd} = this.props;\n\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onCancel} = this.props;\n\n    this.detach();\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n}\n","import {getOwnerDocument} from '../../utilities';\n\nexport function getEventListenerTarget(\n  element: EventTarget | null\n): EventTarget | Document {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n  return element instanceof EventTarget ? element : getOwnerDocument(element);\n}\n","import type {PointerEvent} from 'react';\n\nimport {getOwnerDocument} from '../../utilities';\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  AbstractPointerSensorOptions,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport interface PointerSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: (\n        {nativeEvent: event}: PointerEvent,\n        {onActivation}: PointerSensorOptions\n      ) => {\n        if (!event.isPrimary || event.button !== 0) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {MouseEvent} from 'react';\n\nimport {getOwnerDocument} from '../../utilities';\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  AbstractPointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type MouseSensorProps = SensorProps<MouseSensorOptions>;\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: MouseSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: (\n        {nativeEvent: event}: MouseEvent,\n        {onActivation}: MouseSensorOptions\n      ) => {\n        if (event.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {TouchEvent} from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\nimport type {SensorProps} from '../types';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport type TouchSensorProps = SensorProps<TouchSensorOptions>;\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: (\n        {nativeEvent: event}: TouchEvent,\n        {onActivation}: TouchSensorOptions\n      ) => {\n        const {touches} = event;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  add,\n  Transform,\n  useIsomorphicLayoutEffect,\n  useNodeRef,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  Context,\n  DndContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport type {ViewRect} from '../../types';\nimport {DndMonitorContext, DndMonitorState} from '../../hooks/monitor';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useLayoutMeasuring,\n  useScrollableAncestors,\n  useClientRect,\n  useClientRects,\n  useScrollOffsets,\n  useViewRect,\n} from '../../hooks/utilities';\nimport type {\n  AutoScrollOptions,\n  LayoutMeasuring,\n  SyntheticListener,\n} from '../../hooks/utilities';\nimport {\n  KeyboardSensor,\n  PointerSensor,\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorHandler,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  getRectDelta,\n  getEventCoordinates,\n  rectIntersection,\n} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {\n  Active,\n  DroppableContainers,\n  DroppableContainer,\n  DataRef,\n} from '../../store/types';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  screenReaderInstructions as defaultScreenReaderInstructions,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\nexport interface Props {\n  id?: string;\n  autoScroll?: boolean | AutoScrollOptions;\n  announcements?: Announcements;\n  cancelDrop?: CancelDrop;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  layoutMeasuring?: Partial<LayoutMeasuring>;\n  modifiers?: Modifiers;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  sensors?: SensorDescriptor<any>[];\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface CancelDropArguments extends DragEndEvent {}\n\nexport type CancelDrop = (\n  args: CancelDropArguments\n) => boolean | Promise<boolean>;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\nconst defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nconst defaultData: DataRef = {current: {}};\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nexport const DndContext = memo(function DndContext({\n  id,\n  autoScroll = true,\n  announcements,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  layoutMeasuring,\n  modifiers,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [monitorState, setMonitorState] = useState<DndMonitorState>(() => ({\n    type: null,\n    event: null,\n  }));\n  const {\n    draggable: {active: activeId, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const node = activeId ? draggableNodes[activeId] : null;\n  const activeRects = useRef<Active['rect']['current']>({\n    initial: null,\n    translated: null,\n  });\n  const active = useMemo<Active | null>(\n    () =>\n      activeId != null\n        ? {\n            id: activeId,\n            // It's possible for the active node to unmount while dragging\n            data: node?.data ?? defaultData,\n            rect: activeRects,\n          }\n        : null,\n    [activeId, node]\n  );\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useRef(props);\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const {\n    layoutRectMap: droppableRects,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useLayoutMeasuring(droppableContainers, {\n    dragging: activeId != null,\n    dependencies: [translate.x, translate.y],\n    config: layoutMeasuring,\n  });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = activatorEvent\n    ? getEventCoordinates(activatorEvent)\n    : null;\n  const activeNodeRect = useViewRect(activeNode);\n  const activeNodeClientRect = useClientRect(activeNode);\n  const initialActiveNodeRectRef = useRef<ViewRect | null>(null);\n  const initialActiveNodeRect = initialActiveNodeRectRef.current;\n  const nodeRectDelta = getRectDelta(activeNodeRect, initialActiveNodeRect);\n  const sensorContext = useRef<SensorContext>({\n    active: null,\n    activeNode,\n    collisionRect: null,\n    droppableRects,\n    draggableNodes,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n    translatedRect: null,\n  });\n  const overNode = getDroppableNode(\n    sensorContext.current.over?.id ?? null,\n    droppableContainers\n  );\n  const windowRect = useClientRect(\n    activeNode ? activeNode.ownerDocument.defaultView : null\n  );\n  const containerNodeRect = useClientRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const scrollableAncestors = useScrollableAncestors(\n    activeId ? overNode ?? activeNode : null\n  );\n  const scrollableAncestorRects = useClientRects(scrollableAncestors);\n\n  const [overlayNodeRef, setOverlayNodeRef] = useNodeRef();\n  const overlayNodeRect = useClientRect(\n    activeId ? overlayNodeRef.current : null,\n    willRecomputeLayouts\n  );\n\n  const draggingNodeRect = overlayNodeRect ?? activeNodeClientRect;\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    active,\n    over: sensorContext.current.over,\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect,\n    containerNodeRect,\n    overlayNodeRect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const pointerCoordinates = activationCoordinates\n    ? add(activationCoordinates, translate)\n    : null;\n\n  const scrollAdjustment = useScrollOffsets(scrollableAncestors);\n\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n\n  const translatedRect = activeNodeRect\n    ? getAdjustedRect(activeNodeRect, modifiedTranslate)\n    : null;\n\n  const collisionRect = translatedRect\n    ? getAdjustedRect(translatedRect, scrollAdjustment)\n    : null;\n\n  const overId =\n    active && collisionRect\n      ? collisionDetection(Array.from(droppableRects.entries()), collisionRect)\n      : null;\n  const overContainer = getOver(overId, droppableContainers);\n  const over = useMemo(\n    () =>\n      overContainer && overContainer.rect.current\n        ? {\n            id: overContainer.id,\n            rect: overContainer.rect.current,\n            data: overContainer.data,\n            disabled: overContainer.disabled,\n          }\n        : null,\n    [overContainer]\n  );\n\n  const transform = adjustScale(\n    modifiedTranslate,\n    overContainer?.rect.current ?? null,\n    activeNodeRect\n  );\n\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (!activeRef.current) {\n        return;\n      }\n\n      const activeNode = draggableNodes[activeRef.current];\n\n      if (!activeNode) {\n        return;\n      }\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: event.nativeEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onStart(initialCoordinates) {\n          const id = activeRef.current;\n\n          if (!id) {\n            return;\n          }\n\n          const node = draggableNodes[id];\n\n          if (!node) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n          const event: DragStartEvent = {\n            active: {id, data: node.data, rect: activeRects},\n          };\n\n          dispatch({\n            type: Action.DragStart,\n            initialCoordinates,\n            active: id,\n          });\n          setMonitorState({type: Action.DragStart, event});\n          onDragStart?.(event);\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      setActiveSensor(sensorInstance);\n      setActivatorEvent(event.nativeEvent);\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return async function handler() {\n          const {active, over, scrollAdjustedTranslate} = sensorContext.current;\n          let event: DragEndEvent | null = null;\n\n          if (active && scrollAdjustedTranslate) {\n            const {cancelDrop} = latestProps.current;\n\n            event = {\n              active: active,\n              delta: scrollAdjustedTranslate,\n              over,\n            };\n\n            if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n              const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n              if (shouldCancel) {\n                type = Action.DragCancel;\n              }\n            }\n          }\n\n          activeRef.current = null;\n\n          dispatch({type});\n          setActiveSensor(null);\n          setActivatorEvent(null);\n\n          if (event) {\n            const {onDragCancel, onDragEnd} = latestProps.current;\n            const handler = type === Action.DragEnd ? onDragEnd : onDragCancel;\n\n            setMonitorState({type, event});\n            handler?.(event);\n          }\n        };\n      }\n    },\n    [dispatch, draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorHandler,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n\n        if (\n          // No active draggable\n          activeRef.current !== null ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        if (handler(event, sensor.options) === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useIsomorphicLayoutEffect(\n    () => {\n      latestProps.current = props;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    Object.values(props)\n  );\n\n  useEffect(() => {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n\n  useEffect(() => {\n    const {onDragMove} = latestProps.current;\n    const {active, over} = sensorContext.current;\n\n    if (!active) {\n      return;\n    }\n\n    const event: DragMoveEvent = {\n      active,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y,\n      },\n      over,\n    };\n\n    setMonitorState({type: Action.DragMove, event});\n    onDragMove?.(event);\n  }, [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);\n\n  useEffect(\n    () => {\n      const {active, scrollAdjustedTranslate} = sensorContext.current;\n\n      if (!active || !activeRef.current || !scrollAdjustedTranslate) {\n        return;\n      }\n\n      const {onDragOver} = latestProps.current;\n      const event: DragOverEvent = {\n        active,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      setMonitorState({type: Action.DragOver, event});\n      onDragOver?.(event);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [over?.id]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      active,\n      activeNode,\n      collisionRect,\n      droppableRects,\n      draggableNodes,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate: scrollAdjustedTranslate,\n      translatedRect,\n    };\n\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: translatedRect,\n    };\n  }, [\n    active,\n    activeNode,\n    collisionRect,\n    draggableNodes,\n    draggingNodeRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    scrollAdjustedTranslate,\n    translatedRect,\n  ]);\n\n  useAutoScroller({\n    ...getAutoScrollerOptions(),\n    draggingRect: translatedRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const contextValue = useMemo(() => {\n    const memoizedContext: DndContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activeNodeClientRect,\n      activatorEvent,\n      activators,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      overlayNode: {\n        nodeRef: overlayNodeRef,\n        rect: overlayNodeRect,\n        setRef: setOverlayNodeRef,\n      },\n      containerNodeRect,\n      dispatch,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      recomputeLayouts,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      willRecomputeLayouts,\n      windowRect,\n    };\n\n    return memoizedContext;\n  }, [\n    active,\n    activeNode,\n    activeNodeClientRect,\n    activeNodeRect,\n    activatorEvent,\n    activators,\n    containerNodeRect,\n    overlayNodeRect,\n    overlayNodeRef,\n    dispatch,\n    draggableNodes,\n    draggableDescribedById,\n    droppableContainers,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    setOverlayNodeRef,\n    willRecomputeLayouts,\n    windowRect,\n  ]);\n\n  return (\n    <DndMonitorContext.Provider value={monitorState}>\n      <Context.Provider value={contextValue}>\n        <ActiveDraggableContext.Provider value={transform}>\n          {children}\n        </ActiveDraggableContext.Provider>\n      </Context.Provider>\n      <Accessibility\n        announcements={announcements}\n        hiddenTextDescribedById={draggableDescribedById}\n        screenReaderInstructions={screenReaderInstructions}\n      />\n    </DndMonitorContext.Provider>\n  );\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll =\n      activeSensor?.autoScrollEnabled === false;\n    const autoScrollGloballyDisabled =\n      typeof autoScroll === 'object'\n        ? autoScroll.enabled === false\n        : autoScroll === false;\n    const enabled =\n      !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return {\n        ...autoScroll,\n        enabled,\n      };\n    }\n\n    return {enabled};\n  }\n});\n\nfunction getDroppableNode(\n  id: UniqueIdentifier | null,\n  droppableContainers: DroppableContainers\n): HTMLElement | null {\n  return id ? droppableContainers[id]?.node.current ?? null : null;\n}\n\nfunction getOver(\n  id: UniqueIdentifier | null,\n  droppableContainers: DroppableContainers\n): DroppableContainer | null {\n  return id ? droppableContainers[id] ?? null : null;\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {DraggableNode, DraggableNodes} from '../../store';\nimport type {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNodes: DraggableNodes,\n  id: UniqueIdentifier | null\n): DraggableNode['node']['current'] {\n  const draggableNode = id !== null ? draggableNodes[id] : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n\n  return useLazyMemo(\n    (cachedNode) => {\n      if (id === null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return node ?? cachedNode ?? null;\n    },\n    [node, id]\n  );\n}\n","import type {Coordinates, ViewRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ViewRect | null,\n  rect2: ViewRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {LayoutRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: LayoutRect | null,\n  rect2: LayoutRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorHandler} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorHandler,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {createContext, useContext, useEffect, useMemo} from 'react';\nimport {Transform, useNodeRef} from '@dnd-kit/utilities';\n\nimport {Context, Data} from '../store';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {\n  useData,\n  useSyntheticListeners,\n  SyntheticListenerMap,\n} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: string;\n  data?: Data;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nexport function useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    ariaDescribedById,\n    draggableNodes,\n    droppableRects,\n    activators,\n    over,\n  } = useContext(Context);\n  const {role = defaultRole, roleDescription = 'draggable', tabIndex = 0} =\n    attributes ?? {};\n  const isDragging = active?.id === id;\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useData(data);\n\n  useEffect(\n    () => {\n      draggableNodes[id] = {node, data: dataRef};\n\n      return () => {\n        delete draggableNodes[id];\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  const memoizedAttributes = useMemo(\n    () => ({\n      role,\n      tabIndex,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    }),\n    [role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]\n  );\n\n  return {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes: memoizedAttributes,\n    droppableRects,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    transform,\n  };\n}\n","import {ContextType, useContext} from 'react';\nimport {Context} from '../store';\n\nexport function useDndContext() {\n  return useContext(Context);\n}\n\nexport type UseDndContextReturnValue = ContextType<typeof Context>;\n","import React, {useContext, useEffect, useRef} from 'react';\nimport {CSS} from '@dnd-kit/utilities';\n\nimport {getRelativeTransformOrigin} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport {ActiveDraggableContext} from '../DndContext';\nimport {useDndContext} from '../../hooks';\nimport {useDerivedTransform, useDropAnimation, DropAnimation} from './hooks';\n\ntype TransitionGetter = (\n  activatorEvent: Event | null\n) => React.CSSProperties['transition'] | undefined;\n\nexport interface Props {\n  adjustScale?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  dropAnimation?: DropAnimation | null | undefined;\n  style?: React.CSSProperties;\n  transition?: string | TransitionGetter;\n  modifiers?: Modifiers;\n  wrapperElement?: keyof JSX.IntrinsicElements;\n  zIndex?: number;\n}\n\nconst defaultTransition: TransitionGetter = (activatorEvent) => {\n  const isKeyboardActivator = activatorEvent instanceof KeyboardEvent;\n\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nexport const defaultDropAnimation: DropAnimation = {\n  duration: 250,\n  easing: 'ease',\n  dragSourceOpacity: 0,\n};\n\nexport const DragOverlay = React.memo(\n  ({\n    adjustScale = false,\n    children,\n    dropAnimation = defaultDropAnimation,\n    style: styleProp,\n    transition = defaultTransition,\n    modifiers,\n    wrapperElement = 'div',\n    className,\n    zIndex = 999,\n  }: Props) => {\n    const {\n      active,\n      activeNodeRect,\n      activeNodeClientRect,\n      containerNodeRect,\n      draggableNodes,\n      activatorEvent,\n      over,\n      overlayNode,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      windowRect,\n    } = useDndContext();\n    const transform = useContext(ActiveDraggableContext);\n    const modifiedTransform = applyModifiers(modifiers, {\n      active,\n      activeNodeRect: activeNodeClientRect,\n      draggingNodeRect: overlayNode.rect,\n      containerNodeRect,\n      over,\n      overlayNodeRect: overlayNode.rect,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      transform,\n      windowRect,\n    });\n    const derivedTransform = useDerivedTransform(\n      modifiedTransform,\n      activeNodeRect,\n      overlayNode.nodeRef.current\n    );\n    const isDragging = active !== null;\n    const intermediateTransform = derivedTransform ?? modifiedTransform;\n    const finalTransform = adjustScale\n      ? intermediateTransform\n      : {\n          ...intermediateTransform,\n          scaleX: 1,\n          scaleY: 1,\n        };\n    const style: React.CSSProperties | undefined = activeNodeRect\n      ? {\n          position: 'fixed',\n          width: activeNodeRect.width,\n          height: activeNodeRect.height,\n          top: activeNodeRect.top,\n          left: activeNodeRect.left,\n          zIndex,\n          transform: CSS.Transform.toString(finalTransform),\n          touchAction: 'none',\n          transformOrigin:\n            adjustScale && activatorEvent\n              ? getRelativeTransformOrigin(\n                  activatorEvent as MouseEvent | KeyboardEvent | TouchEvent,\n                  activeNodeRect\n                )\n              : undefined,\n          transition: derivedTransform\n            ? undefined\n            : typeof transition === 'function'\n            ? transition(activatorEvent)\n            : transition,\n          ...styleProp,\n        }\n      : undefined;\n    const attributes = isDragging\n      ? {\n          style,\n          children,\n          className,\n          transform: finalTransform,\n        }\n      : undefined;\n    const attributesSnapshot = useRef(attributes);\n    const derivedAttributes = attributes ?? attributesSnapshot.current;\n    const {children: finalChildren, transform: _, ...otherAttributes} =\n      derivedAttributes ?? {};\n    const prevActiveId = useRef(active?.id ?? null);\n    const dropAnimationComplete = useDropAnimation({\n      animate: Boolean(dropAnimation && prevActiveId.current && !active),\n      adjustScale,\n      activeId: prevActiveId.current,\n      draggableNodes,\n      duration: dropAnimation?.duration,\n      easing: dropAnimation?.easing,\n      dragSourceOpacity: dropAnimation?.dragSourceOpacity,\n      node: overlayNode.nodeRef.current,\n      transform: attributesSnapshot.current?.transform,\n    });\n    const shouldRender = Boolean(\n      finalChildren && (children || (dropAnimation && !dropAnimationComplete))\n    );\n\n    useEffect(() => {\n      if (active?.id !== prevActiveId.current) {\n        prevActiveId.current = active?.id ?? null;\n      }\n\n      if (active && attributesSnapshot.current !== attributes) {\n        attributesSnapshot.current = attributes;\n      }\n    }, [active, attributes]);\n\n    useEffect(() => {\n      if (dropAnimationComplete) {\n        attributesSnapshot.current = undefined;\n      }\n    }, [dropAnimationComplete]);\n\n    if (!shouldRender) {\n      return null;\n    }\n\n    return React.createElement(\n      wrapperElement,\n      {\n        ...otherAttributes,\n        ref: overlayNode.setRef,\n      },\n      finalChildren\n    );\n  }\n);\n","import {useRef} from 'react';\nimport {Transform, useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {ViewRect} from '../../../types';\n\nexport function useDerivedTransform(\n  transform: Transform,\n  rect: ViewRect | null,\n  overlayNode: HTMLElement | null\n) {\n  const prevRect = useRef(rect);\n\n  return useLazyMemo<Transform | undefined>(\n    (previousValue) => {\n      const initial = prevRect.current;\n\n      if (rect !== initial) {\n        if (rect && initial) {\n          const layoutHasChanged =\n            initial.left !== rect.left || initial.top !== rect.top;\n\n          if (layoutHasChanged && !previousValue) {\n            const overlayNodeRect = overlayNode?.getBoundingClientRect();\n\n            if (overlayNodeRect) {\n              const delta = {\n                ...transform,\n                x: overlayNodeRect.left - rect.left,\n                y: overlayNodeRect.top - rect.top,\n              };\n\n              return delta;\n            }\n          }\n        }\n\n        prevRect.current = rect;\n      }\n\n      return undefined;\n    },\n    [rect, transform, overlayNode]\n  );\n}\n","import {useEffect, useState} from 'react';\nimport {CSS, Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {UniqueIdentifier} from '../../../types';\nimport type {DraggableNodes} from '../../../store';\nimport {getViewRect} from '../../../utilities';\n\nexport interface DropAnimation {\n  duration: number;\n  easing: string;\n  dragSourceOpacity?: number;\n}\n\ninterface Arguments {\n  activeId: UniqueIdentifier | null;\n  animate: boolean;\n  adjustScale: boolean;\n  draggableNodes: DraggableNodes;\n  duration: DropAnimation['duration'] | undefined;\n  easing: DropAnimation['easing'] | undefined;\n  dragSourceOpacity: DropAnimation['dragSourceOpacity'] | undefined;\n  node: HTMLElement | null;\n  transform: Transform | undefined;\n}\n\nexport function useDropAnimation({\n  animate,\n  adjustScale,\n  activeId,\n  draggableNodes,\n  duration,\n  easing,\n  dragSourceOpacity,\n  node,\n  transform,\n}: Arguments) {\n  const [dropAnimationComplete, setDropAnimationComplete] = useState(false);\n\n  useEffect(() => {\n    if (!animate || !activeId || !easing || !duration) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      const finalNode = draggableNodes[activeId]?.node.current;\n\n      if (transform && node && finalNode && finalNode.parentNode !== null) {\n        const fromNode = node.children.length > 1 ? node : node.children[0];\n\n        if (fromNode) {\n          const from = fromNode.getBoundingClientRect();\n          const to = getViewRect(finalNode);\n          const delta = {\n            x: from.left - to.left,\n            y: from.top - to.top,\n          };\n\n          if (Math.abs(delta.x) || Math.abs(delta.y)) {\n            const scaleDelta = {\n              scaleX: adjustScale\n                ? (to.width * transform.scaleX) / from.width\n                : 1,\n              scaleY: adjustScale\n                ? (to.height * transform.scaleY) / from.height\n                : 1,\n            };\n            const finalTransform = CSS.Transform.toString({\n              x: transform.x - delta.x,\n              y: transform.y - delta.y,\n              ...scaleDelta,\n            });\n            const originalOpacity = finalNode.style.opacity;\n\n            if (dragSourceOpacity != null) {\n              finalNode.style.opacity = `${dragSourceOpacity}`;\n            }\n\n            const nodeAnimation = node.animate(\n              [\n                {\n                  transform: CSS.Transform.toString(transform),\n                },\n                {\n                  transform: finalTransform,\n                },\n              ],\n              {\n                easing,\n                duration,\n              }\n            );\n\n            nodeAnimation.onfinish = () => {\n              node.style.display = 'none';\n\n              setDropAnimationComplete(true);\n\n              if (finalNode && dragSourceOpacity != null) {\n                finalNode.style.opacity = originalOpacity;\n              }\n            };\n            return;\n          }\n        }\n      }\n\n      setDropAnimationComplete(true);\n    });\n  }, [\n    animate,\n    activeId,\n    adjustScale,\n    draggableNodes,\n    duration,\n    easing,\n    dragSourceOpacity,\n    node,\n    transform,\n  ]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n\n  return dropAnimationComplete;\n}\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: string\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {useContext, useEffect, useRef} from 'react';\nimport {useIsomorphicLayoutEffect, useNodeRef} from '@dnd-kit/utilities';\n\nimport {Context, Action, Data} from '../store';\nimport type {LayoutRect} from '../types';\nimport {useData} from './utilities';\n\nexport interface UseDroppableArguments {\n  id: string;\n  disabled?: boolean;\n  data?: Data;\n}\n\nexport function useDroppable({\n  data,\n  disabled = false,\n  id,\n}: UseDroppableArguments) {\n  const {active, dispatch, over} = useContext(Context);\n  const rect = useRef<LayoutRect | null>(null);\n  const [nodeRef, setNodeRef] = useNodeRef();\n  const dataRef = useData(data);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(\n    () => {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        disabled,\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  return {\n    active,\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {Sensor, SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensor<T extends SensorOptions>(\n  sensor: Sensor<T>,\n  options?: T\n): SensorDescriptor<T> {\n  return useMemo(\n    () => ({\n      sensor,\n      options: options ?? ({} as T),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sensor, options]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensors(\n  ...sensors: (SensorDescriptor<any> | undefined | null)[]\n): SensorDescriptor<SensorOptions>[] {\n  return useMemo(\n    () =>\n      [...sensors].filter(\n        (sensor): sensor is SensorDescriptor<any> => sensor != null\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...sensors]\n  );\n}\n"],"names":["screenReaderInstructions","draggable","defaultAnnouncements","onDragStart","id","onDragOver","overId","onDragEnd","onDragCancel","Action","getMinValueIndex","array","getValueIndex","value","tracked","comparator","length","index","i","noop","_args","omit","elements","_","other","Context","createContext","activatorEvent","active","activeNode","activeNodeRect","activeNodeClientRect","activators","ariaDescribedById","containerNodeRect","dispatch","draggableNodes","droppableRects","Map","droppableContainers","over","overlayNode","nodeRef","current","rect","setRef","scrollableAncestors","scrollableAncestorRects","recomputeLayouts","windowRect","willRecomputeLayouts","defaultCoordinates","Object","freeze","x","y","distanceBetween","p1","p2","Math","sqrt","pow","getEventCoordinates","event","window","TouchEvent","isTouchEvent","touches","clientX","clientY","changedTouches","MouseEvent","type","includes","isMouseEvent","getRelativeTransformOrigin","KeyboardEvent","eventCoordinates","left","width","top","height","centerOfRectangle","offsetLeft","offsetTop","createRectAdjustmentFn","modifier","viewRect","adjustments","reduce","acc","adjustment","bottom","right","getAdjustedRect","getScrollableAncestors","element","scrollParents","findScrollableAncestors","node","Document","scrollingElement","push","HTMLElement","SVGElement","computedStyle","getComputedStyle","overflowRegex","find","property","test","isScrollable","parentNode","getScrollableElement","canUseDOM","document","getScrollCoordinates","Window","scrollX","scrollY","scrollLeft","scrollTop","Direction","getScrollPosition","scrollingContainer","minScroll","maxScroll","scrollWidth","clientWidth","scrollHeight","clientHeight","isTop","isLeft","isBottom","isRight","defaultThreshold","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","thresholdPercentage","finalScrollContainerRect","direction","speed","threshold","Backward","abs","Forward","getScrollElementRect","innerWidth","innerHeight","getBoundingClientRect","getScrollOffsets","add","getElementLayout","offsetWidth","offsetHeight","getEdgeOffset","parent","offset","nodeOffset","offsetParent","getViewRect","scrollOffsets","isViewRect","entry","cornersOfRectangle","rectIntersection","entries","target","intersections","map","max","min","intersectionArea","Number","toFixed","getIntersectionRatio","maxValueIndex","getOwnerDocument","ownerDocument","getInitialState","initialCoordinates","nodes","translate","droppable","containers","reducer","state","action","DragStart","DragMove","coordinates","DragEnd","DragCancel","RegisterDroppable","SetDroppableDisabled","disabled","UnregisterDroppable","DndMonitorContext","useDndMonitor","onDragMove","monitorState","useContext","previousMonitorState","useRef","useEffect","DragOver","Accessibility","announcements","hiddenTextDescribedById","announce","announcement","useAnnouncement","liveRegionId","useUniqueId","mounted","setMounted","useState","useMemo","createPortal","React","HiddenText","LiveRegion","body","AutoScrollActivator","TraversalOrder","LayoutMeasuringStrategy","useData","data","dataRef","useIsomorphicLayoutEffect","LayoutMeasuringFrequency","defaultValue","defaultLayoutMeasuring","strategy","WhileDragging","frequency","Optimized","useClientRect","createUseRectFn","useClientRects","createUseRectsFn","useViewRect","getRect","forceRecompute","previousElement","useLazyMemo","previousValue","previousElements","Listeners","constructor","eventName","handler","options","addEventListener","listeners","removeAll","forEach","this","removeEventListener","hasExceededDistance","delta","measurement","dx","dy","KeyboardCode","defaultKeyboardCodes","start","Space","Enter","cancel","Esc","end","defaultKeyboardCoordinateGetter","currentCoordinates","code","Right","Left","Down","Up","KeyboardSensor","props","windowListeners","defaultView","getWindow","handleKeyDown","bind","handleCancel","attach","handleStart","setTimeout","onStart","Error","context","keyboardCodes","coordinateGetter","scrollBehavior","handleEnd","newCoordinates","scrollDelta","coordinatesDelta","getCoordinatesDelta","scrollElementRect","clampedCoordinates","canScrollX","canScrollY","scrollBy","behavior","handleMove","getAdjustedCoordinates","onMove","preventDefault","onEnd","detach","onCancel","isDistanceConstraint","constraint","Boolean","isDelayConstraint","EventName","onActivation","nativeEvent","AbstractPointerSensor","events","listenerTarget","EventTarget","getEventListenerTarget","handleKeydown","activationConstraint","move","name","Keydown","timeoutId","delay","clearTimeout","activated","tolerance","distance","cancelable","PointerSensor","isPrimary","button","MouseButton","MouseSensor","RightClick","TouchSensor","applyModifiers","modifiers","transform","args","accumulator","defaultSensors","sensor","defaultData","ActiveDraggableContext","scaleX","scaleY","DndContext","memo","autoScroll","children","sensors","collisionDetection","layoutMeasuring","defaultScreenReaderInstructions","store","useReducer","undefined","setMonitorState","activeId","activeRects","initial","translated","activeRef","activeSensor","setActiveSensor","setActivatorEvent","latestProps","draggableDescribedById","layoutRectMap","dragging","dependencies","config","setWillRecomputeLayouts","containersRef","useCallback","recomputeLayoutsTimeoutId","Always","BeforeDragging","isDisabled","container","values","set","createLayoutRectMap","requestAnimationFrame","useLayoutMeasuring","draggableNode","cachedNode","useCachedNode","activationCoordinates","initialActiveNodeRectRef","nodeRectDelta","rect2","rect1","sensorContext","collisionRect","draggingNodeRect","scrollAdjustedTranslate","translatedRect","overNode","_droppableContainers$2","getDroppableNode","_sensorContext$curren2","parentElement","previousNode","ancestors","useScrollableAncestors","overlayNodeRef","setOverlayNodeRef","useNodeRef","overlayNodeRect","modifiedTranslate","pointerCoordinates","scrollAdjustment","scrollCoordinates","setScrollCoordinates","prevElements","handleScroll","cleanup","scrollableElement","passive","filter","Array","from","useScrollOffsets","overContainer","getOver","adjustScale","instantiateSensor","Sensor","sensorInstance","createHandler","async","cancelDrop","Promise","resolve","getSyntheticHandler","activator","useCombineActivators","dndKit","defaultPrevented","capturedBy","Pointer","canScroll","draggingRect","enabled","interval","order","TreeOrder","setAutoScrollInterval","clearAutoScrollInterval","useInterval","scrollSpeed","DraggableRect","scrollDirection","scrollContainerRef","sortedScrollableAncestors","reverse","indexOf","scrolllContainerRect","JSON","stringify","useAutoScroller","autoScrollEnabled","getAutoScrollerOptions","contextValue","Provider","NullContext","defaultRole","useDndContext","defaultTransition","defaultDropAnimation","duration","easing","dragSourceOpacity","DragOverlay","dropAnimation","style","styleProp","transition","wrapperElement","className","zIndex","modifiedTransform","derivedTransform","prevRect","useDerivedTransform","isDragging","intermediateTransform","finalTransform","position","CSS","Transform","toString","touchAction","transformOrigin","attributes","attributesSnapshot","derivedAttributes","finalChildren","otherAttributes","prevActiveId","dropAnimationComplete","animate","setDropAnimationComplete","finalNode","_draggableNodes$activ","fromNode","to","originalOpacity","opacity","onfinish","display","useDropAnimation","_attributesSnapshot$c","shouldRender","createElement","ref","rects","centerRect","distances","minValueIndex","corners","entryCorners","corner","role","roleDescription","tabIndex","setNodeRef","useSyntheticListeners","isOver"],"mappings":"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"}