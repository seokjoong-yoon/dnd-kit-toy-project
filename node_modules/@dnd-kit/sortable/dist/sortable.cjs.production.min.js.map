{"version":3,"file":"sortable.cjs.production.min.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts","../src/utilities/getSortedRects.ts","../src/strategies/rectSwapping.ts","../src/hooks/useSortable.ts","../src/hooks/utilities/useDerivedTransform.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = layoutRects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.offsetLeft +\n            newIndexRect.width -\n            (activeNodeRect.offsetLeft + activeNodeRect.width)\n          : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!previousRect && !nextRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width)\n      : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width)\n    : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(layoutRects, overIndex, activeIndex);\n\n  const oldRect = layoutRects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = layoutRects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.offsetTop +\n            overIndexRect.height -\n            (activeNodeRect.offsetTop + activeNodeRect.height)\n          : overIndexRect.offsetTop - activeNodeRect.offsetTop,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n      : nextRect\n      ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n    : previousRect\n    ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n    : 0;\n}\n","import React, {MutableRefObject, useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, LayoutRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: LayoutRect[];\n  strategy: SortingStrategy;\n  wasSorting: MutableRefObject<boolean>;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  wasSorting: {current: false},\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    overlayNode,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(overlayNode.rect !== null);\n  const items = useMemo(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'string' ? item : item.id\n      ),\n    [userDefinedItems]\n  );\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const isSorting = activeIndex !== -1;\n  const wasSorting = useRef(isSorting);\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isSorting && !willRecomputeLayouts) {\n      // To-do: Add partial recompution of only subset of rects\n      recomputeLayouts();\n    }\n  }, [itemsHaveChanged, isSorting, recomputeLayouts, willRecomputeLayouts]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      wasSorting.current = isSorting;\n    });\n  }, [isSorting]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects,\n      strategy,\n      wasSorting,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      sortedRects,\n      useDragOverlay,\n      strategy,\n      wasSorting,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport type {AnimateLayoutChanges, SortableTransition} from './types';\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  isSorting,\n  index,\n  newIndex,\n  transition,\n}) => {\n  if (!transition) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {\n  closestCorners,\n  getViewRect,\n  getScrollableAncestors,\n  KeyboardCode,\n  RectEntry,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {droppableContainers, translatedRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!translatedRect) {\n      return;\n    }\n\n    const layoutRects: RectEntry[] = [];\n\n    Object.entries(droppableContainers).forEach(([id, container]) => {\n      if (container?.disabled) {\n        return;\n      }\n\n      const node = container?.node.current;\n\n      if (!node) {\n        return;\n      }\n\n      const rect = getViewRect(node);\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (translatedRect.top + translatedRect.height <= rect.top) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (translatedRect.top >= rect.top + rect.height) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (translatedRect.left >= rect.left + rect.width) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (translatedRect.left + translatedRect.width <= rect.left) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n      }\n    });\n\n    const closestId = closestCorners(layoutRects, translatedRect);\n\n    if (closestId) {\n      const newNode = droppableContainers[closestId]?.node.current;\n\n      if (newNode) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const newRect = getViewRect(newNode);\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: translatedRect.width - newRect.width,\n              y: translatedRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n","import type {\n  LayoutRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  layoutRects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<LayoutRect[]>((accumulator, id, index) => {\n    const layoutRect = layoutRects.get(id);\n\n    if (layoutRect) {\n      accumulator[index] = layoutRect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {useDraggable, useDroppable, UseDraggableArguments} from '@dnd-kit/core';\nimport {CSS, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {arrayMove, isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {AnimateLayoutChanges, SortableTransition} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments extends UseDraggableArguments {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  id,\n  strategy: localStrategy,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n    wasSorting,\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const {rect, node, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n  });\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    wasSorting.current &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        layoutRects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? arrayMove(items, activeIndex, overIndex).indexOf(id)\n      : index;\n  const prevNewIndex = useRef(newIndex);\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: prevNewIndex.current,\n    transition,\n    wasSorting: wasSorting.current,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting) {\n      prevNewIndex.current = newIndex;\n    }\n  }, [isSorting, newIndex]);\n\n  return {\n    active,\n    attributes,\n    activatorEvent,\n    rect,\n    index,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (derivedTransform) {\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource || !transition) {\n      return null;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return null;\n  }\n}\n","import {useEffect, useRef, useState} from 'react';\nimport {getBoundingClientRect, LayoutRect} from '@dnd-kit/core';\nimport type {Transform} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<LayoutRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({rect, disabled, index, node}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const prevIndex = useRef(index);\n\n  useEffect(() => {\n    if (!disabled && index !== prevIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getBoundingClientRect(node.current);\n        const delta = {\n          x: initial.offsetLeft - current.offsetLeft,\n          y: initial.offsetTop - current.offsetTop,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== prevIndex.current) {\n      prevIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","isValidIndex","index","defaultScale","scaleX","scaleY","rectSortingStrategy","layoutRects","activeIndex","overIndex","newRects","oldRect","newRect","x","offsetLeft","y","offsetTop","width","height","Context","React","createContext","containerId","disableTransforms","items","useDragOverlay","sortedRects","strategy","wasSorting","current","defaultAnimateLayoutChanges","isSorting","newIndex","transition","defaultTransition","duration","easing","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","directions","KeyboardCode","Down","Right","Up","Left","children","id","userDefinedItems","active","overlayNode","droppableRects","over","recomputeLayouts","willRecomputeLayouts","useDndContext","useUniqueId","Boolean","rect","useMemo","map","item","indexOf","useRef","previousItemsRef","reduce","accumulator","layoutRect","get","Array","getSortedRects","itemsHaveChanged","arr2","join","useIsomorphicLayoutEffect","useEffect","requestAnimationFrame","contextValue","Provider","value","activeNodeRect","fallbackActiveRect","itemGap","currentRect","previousRect","nextRect","getItemGap","newIndexRect","event","context","droppableContainers","translatedRect","scrollableAncestors","includes","code","preventDefault","Object","entries","forEach","container","disabled","node","getViewRect","top","push","left","closestId","closestCorners","newNode","_droppableContainers$","hasDifferentScrollAncestors","getScrollableAncestors","some","element","offset","animateLayoutChanges","attributes","userDefinedAttributes","data","customData","localStrategy","globalStrategy","useContext","sortable","setNodeRef","setDroppableNodeRef","useDroppable","activatorEvent","setDraggableNodeRef","listeners","isDragging","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","prevNewIndex","shouldAnimateLayoutChanges","derivedTransform","setDerivedtransform","useState","prevIndex","initial","getBoundingClientRect","delta","useDerivedTransform","overIndexRect"],"mappings":"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"}